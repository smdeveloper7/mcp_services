
# version: "3.8"

# 프로젝트명 설정
name: mcp-services

services:
  # Tourism Service - stdio transport
  tourism-stdio:
    build:
      context: ./services/tourism
      dockerfile: Dockerfile
    container_name: mcp-tourism-stdio
    environment:
      - KOREA_TOURISM_API_KEY=${KOREA_TOURISM_API_KEY}
      - MCP_TRANSPORT=stdio
      - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-INFO}
      - MCP_TOURISM_DEFAULT_LANGUAGE=${MCP_TOURISM_DEFAULT_LANGUAGE:-ko}
      - MCP_TOURISM_CACHE_TTL=${MCP_TOURISM_CACHE_TTL:-3600}
    profiles:
      - tourism-stdio
      - stdio

  # Tourism Service - HTTP transport
  tourism-http:
    build:
      context: ./services/tourism
      dockerfile: Dockerfile
      args:
        - MCP_TRANSPORT=streamable-http
        - MCP_HOST=0.0.0.0
        - MCP_PORT=8000
        - MCP_PATH=/mcp
        - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-INFO}
    container_name: mcp-tourism-http
    ports:
      - "5557:8000"
    environment:
      - KOREA_TOURISM_API_KEY=${KOREA_TOURISM_API_KEY}
      - MCP_TOURISM_DEFAULT_LANGUAGE=${MCP_TOURISM_DEFAULT_LANGUAGE:-ko}
      - MCP_TOURISM_CACHE_TTL=${MCP_TOURISM_CACHE_TTL:-3600}
      - MCP_TOURISM_RATE_LIMIT_CALLS=${MCP_TOURISM_RATE_LIMIT_CALLS:-10}
      - MCP_TOURISM_RATE_LIMIT_PERIOD=${MCP_TOURISM_RATE_LIMIT_PERIOD:-1}
      - MCP_TOURISM_CONCURRENCY_LIMIT=${MCP_TOURISM_CONCURRENCY_LIMIT:-20}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - tourism-http
      - http
      - default

  # Tourism Service - SSE transport
  tourism-sse:
    build:
      context: ./services/tourism
      dockerfile: Dockerfile
      args:
        - MCP_TRANSPORT=sse
        - MCP_HOST=0.0.0.0
        - MCP_PORT=8080
        - MCP_PATH=/mcp
        - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-INFO}
    container_name: mcp-tourism-sse
    ports:
      - "8082:8080"
    environment:
      - KOREA_TOURISM_API_KEY=${KOREA_TOURISM_API_KEY}
      - MCP_TOURISM_DEFAULT_LANGUAGE=${MCP_TOURISM_DEFAULT_LANGUAGE:-ko}
      - MCP_TOURISM_CACHE_TTL=${MCP_TOURISM_CACHE_TTL:-3600}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - tourism-sse
      - sse

  # Weather Service - stdio transport
  weather-stdio:
    build:
      context: ./services/weather
      dockerfile: Dockerfile
    container_name: mcp-weather-stdio
    environment:
      - KOREA_WEATHER_API_KEY=${KOREA_WEATHER_API_KEY}
      - MCP_TRANSPORT=stdio
      - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-INFO}
    profiles:
      - weather-stdio
      - stdio

  # Weather Service - HTTP transport
  weather-http:
    build:
      context: ./services/weather
      dockerfile: Dockerfile
    container_name: mcp-weather-http
    ports:
      - "5556:8000"
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - KOREA_WEATHER_API_KEY=${KOREA_WEATHER_API_KEY}
      - MCP_TRANSPORT=streamable-http
      - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-INFO}
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - weather-http
      - http

  # Weather Service - SSE transport
  weather-sse:
    build:
      context: ./services/weather
      dockerfile: Dockerfile
    container_name: mcp-weather-sse
    ports:
      - "8081:8080"
    environment:
      - KOREA_WEATHER_API_KEY=${KOREA_WEATHER_API_KEY}
      - MCP_TRANSPORT=sse
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8080
      - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-INFO}
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - weather-sse
      - sse

  # Development setup - All services together
  dev-all:
    build:
      context: ./services/tourism
      dockerfile: Dockerfile
      args:
        - MCP_TRANSPORT=streamable-http
        - MCP_HOST=0.0.0.0
        - MCP_PORT=3000
        - MCP_PATH=/api/mcp
        - MCP_LOG_LEVEL=DEBUG
    container_name: mcp-dev-tourism
    ports:
      - "3000:3000"
    environment:
      - KOREA_TOURISM_API_KEY=${KOREA_TOURISM_API_KEY}
      - MCP_TOURISM_DEFAULT_LANGUAGE=${MCP_TOURISM_DEFAULT_LANGUAGE:-en}
      - MCP_TOURISM_CACHE_TTL=${MCP_TOURISM_CACHE_TTL:-3600}
      - MCP_TOURISM_RATE_LIMIT_CALLS=${MCP_TOURISM_RATE_LIMIT_CALLS:-10}
      - MCP_TOURISM_RATE_LIMIT_PERIOD=${MCP_TOURISM_RATE_LIMIT_PERIOD:-1}
      - MCP_TOURISM_CONCURRENCY_LIMIT=${MCP_TOURISM_CONCURRENCY_LIMIT:-20}
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
    profiles:
      - dev

  dev-weather:
    build:
      context: ./services/weather
      dockerfile: Dockerfile
    container_name: mcp-dev-weather
    ports:
      - "3001:8000"
    environment:
      - KOREA_WEATHER_API_KEY=${KOREA_WEATHER_API_KEY}
      - MCP_TRANSPORT=streamable-http
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - MCP_LOG_LEVEL=DEBUG
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
    profiles:
      - dev

networks:
  default:
    name: mcp-korea-services-network
